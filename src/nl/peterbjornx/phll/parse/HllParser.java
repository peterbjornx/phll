/* HllParser.java */
/* Generated By:JavaCC: Do not edit this line. HllParser.java */
package nl.peterbjornx.phll.parse;

import nl.peterbjornx.phll.lang.*;
import nl.peterbjornx.phll.ast.*;
import nl.peterbjornx.phll.rrf.*;
import nl.peterbjornx.phll.symbol.*;
import nl.peterbjornx.phll.type.*;
import nl.peterbjornx.phll.symbol.builtin.*;

import java.util.*;

public class HllParser implements HllParserConstants {
    public static SymbolStore store;
    public static void main(String args[]) throws ParseException
    {
        HllParser parser = new HllParser(System.in);
        parser.store = new SymbolStore();
        IntegerOperators.setup(parser.store);

        long time = System.currentTimeMillis();
            parser.source_unit();
            System.out.println("took: "+ (System.currentTimeMillis() - time) );
    }

  final public Type base_type() throws ParseException {
    if (jj_2_1(4)) {
      jj_consume_token(UINT32);
{if ("" != null) return new NumericType(32, false);}
    } else if (jj_2_2(4)) {
      jj_consume_token(SINT32);
{if ("" != null) return new NumericType(32, true);}
    } else if (jj_2_3(4)) {
      jj_consume_token(UINT16);
{if ("" != null) return new NumericType(16, false);}
    } else if (jj_2_4(4)) {
      jj_consume_token(SINT16);
{if ("" != null) return new NumericType(16, true);}
    } else if (jj_2_5(4)) {
      jj_consume_token(UINT8);
{if ("" != null) return new NumericType(8, false);}
    } else if (jj_2_6(4)) {
      jj_consume_token(SINT8);
{if ("" != null) return new NumericType(8, true);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> par_list() throws ParseException {List<Expression> list = new LinkedList<Expression>();
    Expression v, v2;
    v = expr();
    label_1:
    while (true) {
      if (jj_2_7(4)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      v2 = expr();
list.add(v2);
    }
list.add(0,v);
        {if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Expression prim_expr() throws ParseException {Expression val;
    List<Expression> parlist;
    String ex;
    Token t2,t;
    if (jj_2_8(4)) {
      t = jj_consume_token(NUMBER);
{if ("" != null) return new NumericExpression(t.toString());}
    } else if (jj_2_9(4)) {
      t = jj_consume_token(NAME);
{if ("" != null) return new SymbolReferenceExpression(store, t.toString());}
    } else if (jj_2_10(4)) {
      jj_consume_token(LPAR);
      val = expr();
      jj_consume_token(RPAR);
{if ("" != null) return val;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression postfix_expr() throws ParseException {Expression l, r;
    List<Expression> p;
    l = prim_expr();
    label_2:
    while (true) {
      if (jj_2_11(4)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_12(4)) {
        jj_consume_token(INC);
l = new UnaryExpression(store, Operator.POSTINC, l);
      } else if (jj_2_13(4)) {
        jj_consume_token(DEC);
l = new UnaryExpression(store, Operator.POSTDEC, l);
      } else if (jj_2_14(4)) {
        jj_consume_token(LSQB);
        r = expr();
        jj_consume_token(RSQB);
l = new InfixExpression(store, Operator.INDEX, l, r);
      } else if (jj_2_15(4)) {
        jj_consume_token(LPAR);
        jj_consume_token(RPAR);
l = new FunctionCallExpression(l, new LinkedList<Expression>());
      } else if (jj_2_16(4)) {
        jj_consume_token(LPAR);
        p = par_list();
        jj_consume_token(RPAR);
l = new FunctionCallExpression(l, p);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Operator unary_op() throws ParseException {
    if (jj_2_17(4)) {
      jj_consume_token(MINUS);
{if ("" != null) return Operator.NEGATE;}
    } else if (jj_2_18(4)) {
      jj_consume_token(NOT);
{if ("" != null) return Operator.NOT;}
    } else if (jj_2_19(4)) {
      jj_consume_token(INV);
{if ("" != null) return Operator.INV;}
    } else if (jj_2_20(4)) {
      jj_consume_token(AND);
{if ("" != null) return Operator.ADDR_OF;}
    } else if (jj_2_21(4)) {
      jj_consume_token(TIMES);
{if ("" != null) return Operator.DEREF;}
    } else if (jj_2_22(4)) {
      jj_consume_token(PLUS);
{if ("" != null) return Operator.NOOP;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression unary_expr() throws ParseException {Expression val;
    Operator   op;
    if (jj_2_23(4)) {
      op = unary_op();
      val = cast_expr();
{if ("" != null) return new UnaryExpression(store, op, val);}
    } else if (jj_2_24(4)) {
      jj_consume_token(INC);
      val = unary_expr();
{if ("" != null) return new UnaryExpression(store, Operator.PREINC, val);}
    } else if (jj_2_25(4)) {
      jj_consume_token(DEC);
      val = unary_expr();
{if ("" != null) return new UnaryExpression(store, Operator.PREDEC, val);}
    } else if (jj_2_26(4)) {
      val = postfix_expr();
{if ("" != null) return val;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression cast_expr() throws ParseException {Expression l;
    //TODO: Casts
        l = unary_expr();
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression mult_expr() throws ParseException {Expression l,r;
    l = unary_expr();
    label_3:
    while (true) {
      if (jj_2_27(4)) {
        ;
      } else {
        break label_3;
      }
      if (jj_2_28(4)) {
        jj_consume_token(TIMES);
        r = unary_expr();
l = new InfixExpression(store, Operator.MUL, l, r);
      } else if (jj_2_29(4)) {
        jj_consume_token(DIVIDE);
        r = unary_expr();
l = new InfixExpression(store, Operator.DIV, l, r);
      } else if (jj_2_30(4)) {
        jj_consume_token(MODULUS);
        r = unary_expr();
l = new InfixExpression(store, Operator.MOD, l, r);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression add_expr() throws ParseException {Expression l, r;
    l = mult_expr();
    label_4:
    while (true) {
      if (jj_2_31(4)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_32(4)) {
        jj_consume_token(PLUS);
        r = mult_expr();
l = new InfixExpression(store, Operator.SUM, l, r);
      } else if (jj_2_33(4)) {
        jj_consume_token(MINUS);
        r = mult_expr();
l = new InfixExpression(store, Operator.SUB, l, r);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression shift_expr() throws ParseException {Expression l, r;
    l = add_expr();
    label_5:
    while (true) {
      if (jj_2_34(4)) {
        ;
      } else {
        break label_5;
      }
      if (jj_2_35(4)) {
        jj_consume_token(LSH);
        r = add_expr();
l = new InfixExpression(store, Operator.SHIFT_L, l, r);
      } else if (jj_2_36(4)) {
        jj_consume_token(RSH);
        r = add_expr();
l = new InfixExpression(store, Operator.SHIFT_R, l, r);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression rel_expr() throws ParseException {Expression l, r;
    l = shift_expr();
    label_6:
    while (true) {
      if (jj_2_37(4)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_38(4)) {
        jj_consume_token(GT);
        r = shift_expr();
l = new InfixExpression(store, Operator.GREATER, l, r);
      } else if (jj_2_39(4)) {
        jj_consume_token(LT);
        r = shift_expr();
l = new InfixExpression(store, Operator.LESS, l, r);
      } else if (jj_2_40(4)) {
        jj_consume_token(GEQ);
        r = shift_expr();
l = new InfixExpression(store, Operator.GREATER_EQ, l, r);
      } else if (jj_2_41(4)) {
        jj_consume_token(LEQ);
        r = shift_expr();
l = new InfixExpression(store, Operator.LESS_EQ, l, r);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression eq_expr() throws ParseException {Expression l, r;
    l = rel_expr();
    label_7:
    while (true) {
      if (jj_2_42(4)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_43(4)) {
        jj_consume_token(EQ);
        r = rel_expr();
l = new InfixExpression(store, Operator.EQUALS, l, r);
      } else if (jj_2_44(4)) {
        jj_consume_token(NEQ);
        r = rel_expr();
l = new InfixExpression(store, Operator.NOT_EQ, l, r);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression and_expr() throws ParseException {Expression l, r;
    l = eq_expr();
    label_8:
    while (true) {
      if (jj_2_45(4)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(AND);
      r = eq_expr();
l = new InfixExpression(store, Operator.AND, l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression xor_expr() throws ParseException {Expression l, r;
    l = and_expr();
    label_9:
    while (true) {
      if (jj_2_46(4)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(XOR);
      r = and_expr();
l = new InfixExpression(store, Operator.XOR, l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression or_expr() throws ParseException {Expression l, r;
    l = xor_expr();
    label_10:
    while (true) {
      if (jj_2_47(4)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(OR);
      r = xor_expr();
l = new InfixExpression(store, Operator.OR, l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression scand_expr() throws ParseException {Expression l, r;
    l = or_expr();
    label_11:
    while (true) {
      if (jj_2_48(4)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(ANL);
      r = or_expr();
l = new InfixExpression(store, Operator.AND_SC, l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression scor_expr() throws ParseException {Expression l, r;
    l = scand_expr();
    label_12:
    while (true) {
      if (jj_2_49(4)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(ORL);
      r = scand_expr();
l = new InfixExpression(store, Operator.OR_SC, l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expression tern_expr() throws ParseException {Expression c, t, f;
    c = scor_expr();
    if (jj_2_50(4)) {
      jj_consume_token(TERN);
      t = expr();
      jj_consume_token(COLON);
      f = tern_expr();
c = new TernaryExpression(c, t, f);
    } else {
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Operator assign_op() throws ParseException {
    if (jj_2_51(4)) {
      jj_consume_token(ASSIGN);
{if ("" != null) return Operator.ASSIGN;}
    } else if (jj_2_52(4)) {
      jj_consume_token(MUL_ASSIGN);
{if ("" != null) return Operator.MUL_ASSIGN;}
    } else if (jj_2_53(4)) {
      jj_consume_token(DIV_ASSIGN);
{if ("" != null) return Operator.DIV_ASSIGN;}
    } else if (jj_2_54(4)) {
      jj_consume_token(ADD_ASSIGN);
{if ("" != null) return Operator.ADD_ASSIGN;}
    } else if (jj_2_55(4)) {
      jj_consume_token(SUB_ASSIGN);
{if ("" != null) return Operator.SUB_ASSIGN;}
    } else if (jj_2_56(4)) {
      jj_consume_token(MOD_ASSIGN);
{if ("" != null) return Operator.MOD_ASSIGN;}
    } else if (jj_2_57(4)) {
      jj_consume_token(SHL_ASSIGN);
{if ("" != null) return Operator.SHL_ASSIGN;}
    } else if (jj_2_58(4)) {
      jj_consume_token(SHR_ASSIGN);
{if ("" != null) return Operator.SHR_ASSIGN;}
    } else if (jj_2_59(4)) {
      jj_consume_token(AND_ASSIGN);
{if ("" != null) return Operator.AND_ASSIGN;}
    } else if (jj_2_60(4)) {
      jj_consume_token(OR_ASSIGN);
{if ("" != null) return Operator.OR_ASSIGN;}
    } else if (jj_2_61(4)) {
      jj_consume_token(XOR_ASSIGN);
{if ("" != null) return Operator.XOR_ASSIGN;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression assign_expr() throws ParseException {Expression l, r;
    Operator op;
    if (jj_2_62(4)) {
      l = unary_expr();
      op = assign_op();
      r = assign_expr();
{if ("" != null) return new InfixExpression(store, op, l, r);}
    } else if (jj_2_63(4)) {
      l = tern_expr();
{if ("" != null) return l;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression const_expr() throws ParseException {Expression e;
    e = tern_expr();
{if ("" != null) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expr() throws ParseException {Expression v;
    v = assign_expr();
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
  }

  final public List<Statement> stat_list() throws ParseException {List<Statement> list = new LinkedList<Statement>();
    Statement s;
    label_13:
    while (true) {
      if (jj_2_64(4)) {
        ;
      } else {
        break label_13;
      }
      s = stat();
list.add(s);
    }
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  final public Statement prim_stat() throws ParseException {Statement  s, s2;
    Expression e;
    List<Statement> list;
    if (jj_2_65(4)) {
      jj_consume_token(LBRAC);
      list = stat_list();
      jj_consume_token(RBRAC);
{if ("" != null) return new CompoundStatement(list);}
    } else if (jj_2_66(4)) {
      e = expr();
      jj_consume_token(SEMIC);
{if ("" != null) return new ExpressionStatement(e);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement stat() throws ParseException {Statement s;
    s = prim_stat();
{if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Type type_spec() throws ParseException {Type rv;
    if (jj_2_67(4)) {
      rv = base_type();
{if ("" != null) return rv;}
    } else if (jj_2_68(4)) {
      jj_consume_token(TIMES);
      rv = type_spec();
{if ("" != null) return new PointerType(rv);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VariableSymbol par_single() throws ParseException {Type t;
    Token n;
    t = type_spec();
    n = jj_consume_token(NAME);
{if ("" != null) return new VariableSymbol(n.toString(),t);}
    throw new Error("Missing return statement in function");
  }

  final public List<VariableSymbol> par_decl() throws ParseException {List<VariableSymbol> lv = new LinkedList<VariableSymbol>();
    VariableSymbol vs, v2;
    v2 = par_single();
    label_14:
    while (true) {
      if (jj_2_69(4)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(COMMA);
      vs = par_single();
lv.add(vs);
    }
lv.add(0,v2);
        {if ("" != null) return lv;}
    throw new Error("Missing return statement in function");
  }

  final public List<VariableSymbol> var_block() throws ParseException {List<VariableSymbol> lv = new LinkedList<VariableSymbol>();
    List<VariableSymbol> vs;
    label_15:
    while (true) {
      if (jj_2_70(4)) {
        ;
      } else {
        break label_15;
      }
      vs = var_decl();
      jj_consume_token(SEMIC);
lv.addAll(vs);
    }
{if ("" != null) return lv;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionImplementation func_impl() throws ParseException {Type t;
    Token n;
    FunctionImplementation fi = new FunctionImplementation(store);
    List<VariableSymbol> ps,vd;
    List<Statement> ls;
    store = fi.getLocalStore();
    t = type_spec();
    n = jj_consume_token(NAME);
    if (jj_2_71(4)) {
      jj_consume_token(LPAR);
      jj_consume_token(RPAR);
ps = new LinkedList<VariableSymbol>();
    } else if (jj_2_72(4)) {
      jj_consume_token(LPAR);
      ps = par_decl();
      jj_consume_token(RPAR);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LBRAC);
    vd = var_block();
for ( VariableSymbol s : ps )
            store.addSymbol(s);
        for ( VariableSymbol s : vd )
            store.addSymbol(s);
    ls = stat_list();
    jj_consume_token(RBRAC);
fi.setStatementList(ls);
        fi.setName(n.toString());
        fi.setType(t);
        fi.setParameterList(ps);
        store = store.getParent();
        {if ("" != null) return fi;}
    throw new Error("Missing return statement in function");
  }

  final public List<VariableSymbol> var_decl() throws ParseException {Type t;
    Token n,n2;
    List<VariableSymbol> vl = new LinkedList<VariableSymbol>();
    t = type_spec();
    n = jj_consume_token(NAME);
    label_16:
    while (true) {
      if (jj_2_73(4)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(COMMA);
      n2 = jj_consume_token(NAME);
vl.add(new VariableSymbol(n2.toString(),t));
    }
vl.add(0,new VariableSymbol(n.toString(),t));
        {if ("" != null) return vl;}
    throw new Error("Missing return statement in function");
  }

  final public void source_unit() throws ParseException {List<FunctionImplementation> fl = new LinkedList<FunctionImplementation>();
    FunctionImplementation fi;
    List<VariableSymbol> vd = new LinkedList<VariableSymbol>();
    label_17:
    while (true) {
      if (jj_2_74(4)) {
        ;
      } else {
        break label_17;
      }
      if (jj_2_75(4)) {
        vd = var_decl();
        jj_consume_token(SEMIC);
for ( VariableSymbol s : vd )
                         store.addSymbol(s);
      } else if (jj_2_76(4)) {
        fi = func_impl();
fl.add(fi);
               store.addSymbol(new VariableSymbol(fi.getName(), fi.getType()));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
System.out.println("---source unit---");
        System.out.println("global symbol table:");
        for (Symbol s : store.getSymbols()) {
            System.out.println(s.getName()+"\u005ct"+s.getType());
        }
        System.out.println("\u005cnfunctions:");
        for (FunctionImplementation f : fl) {
            System.out.println("************");
            System.out.println("name:  "+f.getName());
            System.out.println("rtype: "+f.getType());
            int n = 0;
            for (VariableSymbol s: f.getParameterList()) {
                System.out.println("par"+(n++)+":\u005ct"+s.getName()+"\u005ct"+s.getType());
            }
            System.out.println("pseudoasm:\u005cn\u005cn");
            CodeBlock b = new CodeBlock();
            for (Statement s : f.getStatementList())
                s.generate(b);
            System.out.println(b);

        }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(TERN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_39()) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(INV)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(ORL)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_scan_token(ANL)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(LSQB)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(RSQB)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_39()) return true;
    if (jj_scan_token(NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_39()) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(SINT8)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(NEQ)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(UINT8)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(SINT16)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(UINT16)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(SINT32)) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(UINT32)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(LEQ)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(GEQ)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_scan_token(LBRAC)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(RBRAC)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(LSH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(RSH)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(MODULUS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_22()) return true;
    if (jj_3R_34()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_scan_token(XOR_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_scan_token(OR_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(AND_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(SHR_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(SHL_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_scan_token(MOD_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(SUB_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_scan_token(ADD_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_scan_token(DIV_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(MUL_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HllParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[76];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HllParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HllParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HllParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HllParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HllParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HllParser(HllParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HllParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 76; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
